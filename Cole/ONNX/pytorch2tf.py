# -*- coding: utf-8 -*-
"""Pytorch2TF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tR8wyFBqtrO1sgMbQtjxJtZTDPpmzkyx

Put this line in pytorch file to save model

```torch.onnx.export(model, dummy_input, ONNX_MODEL, input_names=['input'], output_names=['output'])```

replace ONNX_MODEL with save path
"""

import pandas as pd
import numpy as np

PYTORCH_MODEL = 'pytorchmodel.pth'
ONNX_MODEL = 'onnxmodel.onnx'
TF_MODEL = 'tfmodel.pb'

!pip install onnx

!pip install onnx_tf

import torch
from fastai import vision as fv #installed via pip

import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from torch.autograd import Variable

import onnx

from onnx_tf.backend import prepare #installed via pip

loc = torch.load(PYTORCH_MODEL, map_location=torch.device('cpu'))
body = fv.create_body(fv.models.resnet101, True, None)
data_classes = 2
nf = fv.callbacks.hooks.num_features_model(body) * 2
head = fv.create_head(nf, data_classes, None, ps=0.5, bn_final=False)
model = nn.Sequential(body, head)

trained_model = model.load_state_dict(loc['model'])

"""## Section for importing data (unique for each model)"""

dats = pd.read_csv('BKM_pseudodata.csv')

i = 1 # index for test kinematic set
a = 45*i # start index of set
b = a+45 # end index of set

k = np.array(dats['k'])
qq = np.array(dats['QQ'])
xb = np.array(dats['x_b'])
t = np.array(dats['t'])
min_t = -1.*t
phi = np.array(dats['phi_x'])
F = np.array(dats['F'])
errF = np.array(dats['sigmaF'])
F1 = np.array(dats['F1']) 
F2 = np.array(dats['F2'])
const = np.array(dats['dvcs'])

xdat = np.array([phi[a:b], qq[a:b], xb[a:b], t[a:b], k[a:b], F1[a:b], F2[a:b]], dtype="float32")

x = Variable(torch.from_numpy(xdat[1:5].transpose()))

onnx_model = onnx.load(ONNX_MODEL)

tf_rep = prepare(onnx_model)

# Input nodes to the model
print('inputs:', tf_rep.inputs)

# Output nodes from the model
print('outputs:', tf_rep.outputs)

# All nodes in the model
print('tensor_dict:')
print(tf_rep.tensor_dict)

tf_rep.run(xdat[1:5].T)

tf_rep.export_graph(TF_MODEL)